
public class PrettyPrint {

	String Tab = "";
	
	
	public PrettyPrint(lexeme tree){
		PrettyPrint2(tree);
	}

	
	private void PrettyPrint2(lexeme tree) {

		
		switch(tree.type){
			case "PROGRAM":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "IMPORTSLEFT":
				System.out.print("import ");
				PrettyPrint2(tree.right);
				break;
			case "IMPORTSRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "IMPORTS":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "MAINLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "MAINRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "MAINFUNC":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "UNARY":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "UNARYLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				//System.out.println(tree.right.type + " ----------------");
				break;
			case "UNARYRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "EXPRESSIONLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "EXPRESSION":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "OPERATOR":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "optExpressionListLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "optExpressionList":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifStatementLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifStatementRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifStatementLEFTLEFT":
				System.out.print("if ");
				PrettyPrint2(tree.right);
				break;
			case "ifStatementLEFTRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifStatementRIGHTLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifStatement":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "optElse":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ELSE":
				System.out.print("else ");
				break;
			case "whileLoopLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "whileLoopRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "whileLoopLEFTLEFT":
				System.out.print("while ");
				PrettyPrint2(tree.right);
				break;
			case "whileLoopLEFTRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "whileLoopRIGHTLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "whileLoop":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "blockLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "block":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "statement":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "statements":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "nonOptVarDef":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "nonOptVarDefLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "nonOptVarDefRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "varDef":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "varDefLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "optInit":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionDefLEFT":
				//System.out.print(Tab);
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionDefRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionDefLEFTLEFT":
				System.out.print("function ");
				PrettyPrint2(tree.right);
				break;
			case "functionDefLEFTRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionDefRIGHTLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionDef":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "paramListLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "paramList":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "comparators":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "optParamList":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "forLoopLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "forLoopRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "forLoopLEFTLEFT":
				System.out.print("for ");
				PrettyPrint2(tree.right);
				break;
			case "forLoopLEFTRIGHT":
				PrettyPrint2(tree.left);
				System.out.print("; ");
				break;
			case "forLoopRIGHTLEFT":
				PrettyPrint2(tree.left);
				System.out.print("; ");
				break;
			case "forLoopRIGHTRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "forLoopRIGHTRIGHTLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "forLoop":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classStructureLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classStructure":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionCalls":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionCallLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionCallLEFTLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionCallLEFTRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "functionCall":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classBlock":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classBlockLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classDefLEFT":
				System.out.print("class ");
				PrettyPrint2(tree.right);
				break;
			case "classDefRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classDefRIGHTRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classDef":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classFuncCallLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "classFuncCall":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "printLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "printRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "printRIGHTRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "print":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "printListLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "printList":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "incrementLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "increment":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "decrementLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "decrement":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "conditional":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifGutsLEFT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifGutsRIGHT":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "ifGuts":
				PrettyPrint2(tree.left);
				PrettyPrint2(tree.right);
				break;
			case "EMPTY":
				//System.out.print(tree.display());
				break;
			case "OPEN_BRACE":
				System.out.print("{ \n");
				//System.out.print(Tab);
				Tab += "   ";
				
				System.out.print(Tab);
				break;
			case "CLOSE_BRACE":
				System.out.print("} \n");
				//lastTab = Tab;
				//Tab = Tab = "\t";
				Tab = Tab.substring(3);
				System.out.print(Tab);
				break;
			case "LESSTHAN":
				System.out.print(" < ");
				break;
			case "GREATERTHAN":
				System.out.print(" > ");
				break;
			case "LESSTHANEQUALS":
				System.out.print(" <= ");
				break;
			case "GREATERTHANEQUALS":
				System.out.print(" >= ");
				break;
			case "ASSIGN":
				System.out.print(" = ");
				break;
			case "EQUALS?":
				System.out.print(" equals? ");
				break;
			case "OPEN_PAREN":
				System.out.print("(");
				break;
			case "CLOSE_PAREN":
				System.out.print(")");
				break;
			case "SEMICOLON":
				System.out.print("; \n");
				System.out.print(Tab);
				break;
			case "DECREMENT":
				System.out.print("--");
				break;
			case "INCREMENT":
				System.out.print("++");
				break;
			case "COMMA":
				System.out.print(", ");
				break;
			case "DOT":
				System.out.print(".");
				break;
			case "MOD":
				System.out.print(" % ");
				break;
			case "CARET":
				System.out.print(" ^ ");
				break;
			case "PLUS":
				System.out.print(" + ");
				break;
			case "MINUS":
				System.out.print(" - ");
				break;
			case "TIMES":
				System.out.print(" * ");
				break;
			case "DIVIDES":
				System.out.print(" / ");
				break;
			case "STRING":
				System.out.print(tree.display());
				break;
			case "true":
				System.out.print(tree.display());
				break;
			case "false":
				System.out.print(tree.display());
				break;
			case "INTEGER":
				System.out.print(tree.display());
				break;
			case "DECIMAL":
				System.out.print(tree.display());
				break;
			case "MAIN":
				System.out.print("Main");
				break;
			case "VARIABLE":
				System.out.print(tree.display());
				break;
			case "PRINT":
				System.out.print("print");
				break;
			case "OF":
				System.out.print(" of ");
				break;
			default:
				System.out.print(tree.display() + " ");
				break;
				//System.out.print("ENDofINPUT");
		}
	
	}
	
}
